// Generated by view binder compiler. Do not edit!
package com.tapri.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.tapri.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemJobBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView claimButton;

  @NonNull
  public final TextView infoText;

  @NonNull
  public final LinearLayout leftColumn;

  @NonNull
  public final TextView rateText;

  @NonNull
  public final TextView titleText;

  @NonNull
  public final TextView viewDetails;

  private ItemJobBinding(@NonNull LinearLayout rootView, @NonNull TextView claimButton,
      @NonNull TextView infoText, @NonNull LinearLayout leftColumn, @NonNull TextView rateText,
      @NonNull TextView titleText, @NonNull TextView viewDetails) {
    this.rootView = rootView;
    this.claimButton = claimButton;
    this.infoText = infoText;
    this.leftColumn = leftColumn;
    this.rateText = rateText;
    this.titleText = titleText;
    this.viewDetails = viewDetails;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemJobBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemJobBinding inflate(@NonNull LayoutInflater inflater, @Nullable ViewGroup parent,
      boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_job, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemJobBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.claimButton;
      TextView claimButton = ViewBindings.findChildViewById(rootView, id);
      if (claimButton == null) {
        break missingId;
      }

      id = R.id.infoText;
      TextView infoText = ViewBindings.findChildViewById(rootView, id);
      if (infoText == null) {
        break missingId;
      }

      id = R.id.leftColumn;
      LinearLayout leftColumn = ViewBindings.findChildViewById(rootView, id);
      if (leftColumn == null) {
        break missingId;
      }

      id = R.id.rateText;
      TextView rateText = ViewBindings.findChildViewById(rootView, id);
      if (rateText == null) {
        break missingId;
      }

      id = R.id.titleText;
      TextView titleText = ViewBindings.findChildViewById(rootView, id);
      if (titleText == null) {
        break missingId;
      }

      id = R.id.viewDetails;
      TextView viewDetails = ViewBindings.findChildViewById(rootView, id);
      if (viewDetails == null) {
        break missingId;
      }

      return new ItemJobBinding((LinearLayout) rootView, claimButton, infoText, leftColumn,
          rateText, titleText, viewDetails);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
