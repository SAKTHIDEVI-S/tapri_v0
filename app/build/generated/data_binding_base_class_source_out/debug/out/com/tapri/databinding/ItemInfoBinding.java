// Generated by view binder compiler. Do not edit!
package com.tapri.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.tapri.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemInfoBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final TextView infoCategory;

  @NonNull
  public final TextView infoDescription;

  @NonNull
  public final ImageView infoIcon;

  @NonNull
  public final TextView infoTitle;

  @NonNull
  public final TextView infoValue;

  private ItemInfoBinding(@NonNull CardView rootView, @NonNull TextView infoCategory,
      @NonNull TextView infoDescription, @NonNull ImageView infoIcon, @NonNull TextView infoTitle,
      @NonNull TextView infoValue) {
    this.rootView = rootView;
    this.infoCategory = infoCategory;
    this.infoDescription = infoDescription;
    this.infoIcon = infoIcon;
    this.infoTitle = infoTitle;
    this.infoValue = infoValue;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemInfoBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemInfoBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_info, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemInfoBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.infoCategory;
      TextView infoCategory = ViewBindings.findChildViewById(rootView, id);
      if (infoCategory == null) {
        break missingId;
      }

      id = R.id.infoDescription;
      TextView infoDescription = ViewBindings.findChildViewById(rootView, id);
      if (infoDescription == null) {
        break missingId;
      }

      id = R.id.infoIcon;
      ImageView infoIcon = ViewBindings.findChildViewById(rootView, id);
      if (infoIcon == null) {
        break missingId;
      }

      id = R.id.infoTitle;
      TextView infoTitle = ViewBindings.findChildViewById(rootView, id);
      if (infoTitle == null) {
        break missingId;
      }

      id = R.id.infoValue;
      TextView infoValue = ViewBindings.findChildViewById(rootView, id);
      if (infoValue == null) {
        break missingId;
      }

      return new ItemInfoBinding((CardView) rootView, infoCategory, infoDescription, infoIcon,
          infoTitle, infoValue);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
