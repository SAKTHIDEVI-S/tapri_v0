// Generated by view binder compiler. Do not edit!
package com.tapri.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.tapri.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityUnclaimedJobDetailsBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView backButton;

  @NonNull
  public final TextView claimButton;

  @NonNull
  public final TextView contactPhone;

  @NonNull
  public final TextView hourlyRate;

  @NonNull
  public final TextView jobDescription;

  @NonNull
  public final TextView jobTitle;

  @NonNull
  public final TextView location;

  @NonNull
  public final TextView payAmount;

  private ActivityUnclaimedJobDetailsBinding(@NonNull LinearLayout rootView,
      @NonNull TextView backButton, @NonNull TextView claimButton, @NonNull TextView contactPhone,
      @NonNull TextView hourlyRate, @NonNull TextView jobDescription, @NonNull TextView jobTitle,
      @NonNull TextView location, @NonNull TextView payAmount) {
    this.rootView = rootView;
    this.backButton = backButton;
    this.claimButton = claimButton;
    this.contactPhone = contactPhone;
    this.hourlyRate = hourlyRate;
    this.jobDescription = jobDescription;
    this.jobTitle = jobTitle;
    this.location = location;
    this.payAmount = payAmount;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityUnclaimedJobDetailsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityUnclaimedJobDetailsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_unclaimed_job_details, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityUnclaimedJobDetailsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.backButton;
      TextView backButton = ViewBindings.findChildViewById(rootView, id);
      if (backButton == null) {
        break missingId;
      }

      id = R.id.claimButton;
      TextView claimButton = ViewBindings.findChildViewById(rootView, id);
      if (claimButton == null) {
        break missingId;
      }

      id = R.id.contactPhone;
      TextView contactPhone = ViewBindings.findChildViewById(rootView, id);
      if (contactPhone == null) {
        break missingId;
      }

      id = R.id.hourlyRate;
      TextView hourlyRate = ViewBindings.findChildViewById(rootView, id);
      if (hourlyRate == null) {
        break missingId;
      }

      id = R.id.jobDescription;
      TextView jobDescription = ViewBindings.findChildViewById(rootView, id);
      if (jobDescription == null) {
        break missingId;
      }

      id = R.id.jobTitle;
      TextView jobTitle = ViewBindings.findChildViewById(rootView, id);
      if (jobTitle == null) {
        break missingId;
      }

      id = R.id.location;
      TextView location = ViewBindings.findChildViewById(rootView, id);
      if (location == null) {
        break missingId;
      }

      id = R.id.payAmount;
      TextView payAmount = ViewBindings.findChildViewById(rootView, id);
      if (payAmount == null) {
        break missingId;
      }

      return new ActivityUnclaimedJobDetailsBinding((LinearLayout) rootView, backButton,
          claimButton, contactPhone, hourlyRate, jobDescription, jobTitle, location, payAmount);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
